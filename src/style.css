/*
colors in css - https://www.google.com/search?q=color+picker&oq=colo&aqs=chrome.1.69i57j35i39j46i20i199i263i465i512j0i512j46i199i465i512j69i60l2j69i61.2440j0j7&sourceid=chrome&ie=UTF-8
the link above is to a color picker, 
you can choose any color of any brightness and get its hashcode value 
this is how hashcodes work
the numbers in the hashcode go from 0-9 and then from a-f
#fff and #FFF give the same result
there are either 3 or 6 numbers in a hashcode
#RGB = Red, Green, Blue
#RRGGBB = Red, Red, Green, Green, Blue, Blue
#fff and #ffffff give white
#000 and #000000 gives black
#f00 and #ff0000 gives red
when choosing a color you can also use
blue, red, green...
they just dont give as many options
*/
/*
sizes in css
when you set somethings size like 
padding, margin, width, height, border thickness, grid rows or columns...
your most common options to set the size are 
px, em, rem, %, pc, cm, mm...
*/
.theMostImportantCssStyles {
  font-family: "Times New Roman", Times, serif;
  /*this chooses the font family*/
  font-weight: bold;
  /*makes the text bold, you can also choose bolder or a number in the 100*/
  color: blue;
  /*the color of the text in this container*/
  border: solid 1px #000;
  /*
  border needs to have those three variables
  solid is the type of line you want
  the other options are dashed, dotted, double, groove...
  2px is the with of the border
  #000 is the color of the border

  the following 3 lines do the same thing 
  as the line above this comment
  */
  border-style: solid;
  border-width: 1px;
  border-color: #000;
  /*
  you can also give a border to one side
  */
  border-top: solid 1px #000;
  border-bottom: solid 1px #000;
  border-right: solid 1px #000;
  border-left: solid 1px #000;
  /*
  this is how you set each value when your border is only on one side
  */
  border-left-style: solid;
  border-left-width: 1px;
  border-left-color: #000;

  border-radius: 5px;
  /*
  border radius rounds out the border corners
  */

  padding: 5px;
  /*
  padding is what is sounds like, it makes space
  here i say padding:5px; witch means the item gets 5px of padding on every side
  you can also write padding: 5px 10px; witch means 5px on the top and bottom and 10px on the sides
  you can also write padding: 1px 2px 3px 4px; witch means 1px on top, 2px on the right, 3px on the bottom and 4px on the left
  padding: allSides;
  padding:topANDbottom leftANDright;
  padding:top right bottom left;
  You can also use padding-left:; padding-right:; padding-top:; padding-bottom:;
  the same can be done with margin:;
  but margin:0 auto; centeres the element
  padding adds space inside the element
  margin adds space outside the element
  if you have margin, padding and a border on something it woould look like this
  margin
    border
      padding
        element
      padding
    border
  margin

  in the browser when you hover over an item
  green is padding ans orange is margin
  */
  overflow: scroll;
  /*
  creates a scroll bar on that element
  */
  overflow: hidden;
  /*
  hides the overflow
  while overflow: visible; does the opposite
  */
  display: none;
  /*
  hides the element
  */
  display: block;
  /*
  makes the element visable again
  */
  text-align: center;
  /*
  centers texts and only text
  */
  letter-spacing: 5px;
  /*
  the space between letters
  */
  word-spacing: 2px;
  /*
  space between words
  */
  box-shadow: 5px 10px;
  box-shadow: 5px 10px red;
  box-shadow: 5px 10px 5px;
  box-shadow: 5px 10px 5px 2px;
  box-shadow: 5px 10px 5px 2px red;

  text-shadow: 2px 2px;
  text-shadow: 2px 2px red;
  text-shadow: 2px 2px 2px red;

  line-height: 0.8;
  text-transform: uppercase;
  text-transform: lowercase;
  text-transform: capitalize;
  text-decoration: underline;
  text-decoration: line-through;
  background-color: #4caf50;
  font-size: 15px;
}

#hoverChange:hover {
  /*this is how you change things when the mouse hovers over the element*/
  font-size: 25px;
  color: blueviolet;
  background-color: aqua;
}

ul {
  list-style-type: none;
  /*
  removes the dots/numbers in from of every list item (li)
  it must be placed on a ul or an ol
  you can do the same to remove numbers from the ol list items
  */
  margin: 0;
  padding: 0;
  overflow: hidden;
  background-color: #333;
}

ul li {
  float: left;
}

ul li {
  display: block;
  color: white;
  text-align: center;
  padding: 14px 16px;
  cursor: pointer;
}
ul li a:hover:not(.active) {
  background-color: #111;
}

.selected {
  background-color: #4caf50;
}

section {
  margin-left: 20px;
}

section h2 {
  margin-bottom: 20px;
}

.myBtn {
  background-color: aqua;
  border: solid 2px black;
}

#stopBackground {
  background-color: #fff;
  /*
  the element selector uls has a dark backgound color
  this is an id so it overwrites that backgound color
  */
}
#hide {
  padding-top: 79px;
  margin: 0;
}

/*---------------------------------------------DROPDOWN*/
.dropDown {
  display: none;
}
/*---------------------------------------------FLEX*/
.flexClass {
  display: flex;
  /*flex doesnt work unless you have display:flex;*/
  margin-right: 22px;
  /*creates space on the outside of the right side of the element*/
}
#flex1 {
  justify-content: space-around;
}
#flex2 {
  justify-content: space-between;
}
#flex3 {
  justify-content: space-evenly;
}
#flex4 {
  justify-content: center;
}
/*
you can also use a ting called flex-direction
the options are: 
flex-direction: column;
sets each item under the next

flex-direction:column-reverse;
same as the one before exept it reverses the order of the items

flex-direction:row;
sets them in a row next to each other

flex-direction: row-reverse;
same as the one before exept it reverses the order of the items
*/
/*---------------------------------------------GRID*/
#grid {
  display: grid;
  /*grids wont work unless you have display:grid;*/
  grid-template-columns: 33% 33% 33%;
  /*this creates the columns*/
  grid-template-rows: 50% 50%;
  /*this creates the rows*/
  /*
  here i use % to tell the grid how it should look
  but you can also use px              
  */
  width: 1000px;
  height: 300px;
  /*here i set the height and width of the grid itself
  usually you dont need to do that 
  but all of the items are empty divs
  since i used % to make my grid rows and columns
  the grid doesnt know how much space it has
  */
}
#grid div {
  /*this gets every div inside the div with the id grid*/
  width: 100%;
  height: 100%;
  /*here i set the height and width of each of the items in the grid
  so that it fills the entire cell*/
}
#first {
  background-color: #4caf50;
  grid-row: 2;
  grid-column: 2;
  /*usually this div would go in the first cell
  because it is the first element in the grid
  but i used grid-row and grid-column 
  to change where it should go
  if i wrote this
  grid-column: 2 / span 2;
  this element would fill column 2 and 3
  the same can be done with rows 
  and you can span them as much as you want
  */
}
#second {
  background-color: aqua;
}
#third {
  background-color: blue;
}
#fourth {
  background-color: blueviolet;
}
#fifth {
  background-color: chartreuse;
}
#sixth {
  background-color: red;
}

.firstInSection {
  padding-top: 70px;
  /*
  this is how i fixed the sticky nav problem
  i gave the first header in all the sections this class 
  */
}
/*---------------------------------------------FORMS*/
.form input,
.form label,
.form textarea,
.form div,
.form select {
  /*this calls all the inputs, labels, textareas, divs and selects in the form class*/
  margin-top: 5px;
  /*this gives each of them space above*/
}
#img {
  margin-top: 10px;
  width: 60px;
  height: auto;
  /*
  when you are setting the height and width of an image 
  you need either the width or the height to be auto
  if you dont the image will loose its proportions*/
}
/*------------------------------------------------cursor*/
/*
cursor means you mouse
when setting the cursor means changing the way the mouse looks when you hover over the element
you can change the cursor when hovering over anything (div, body, class, id...)
to understand the following code 
start the code and check the bottom of the html and css
to start the code write the following in the terminal
npm i
when it is done write
npm start
*/
.haha {
  cursor: pointer;
}
.haha2 {
  cursor: alias;
}
.haha4 {
  cursor: auto;
}
.haha5 {
  cursor: col-resize;
}
.haha6 {
  cursor: cell;
}
.haha7 {
  cursor: copy;
}
.haha8 {
  cursor: no-drop;
}
.haha9 {
  cursor: crosshair;
}
.haha10 {
  cursor: default;
}
.haha11 {
  cursor: e-resize;
}
.haha12 {
  cursor: grab;
}
.haha13 {
  cursor: grabbing;
}
.haha14 {
  cursor: help;
}
.haha15 {
  cursor: move;
}
.haha16 {
  cursor: n-resize;
}
.haha17 {
  cursor: ne-resize;
}
.haha18 {
  cursor: progress;
}
.haha19 {
  cursor: wait;
}
.haha20 {
  cursor: zoom-in;
}
.haha21 {
  cursor: zoom-out;
}
/*------------------------------------------------padding, margin, border*/
.pmb {
  border: solid 2px #000;
  padding: 5px;
  margin: 10px;
  width: 13%;
}
/*------------------------------------------------transparent color*/
.transparentColor {
  background-color: rgba(0, 0, 255, 0.5);
  /*                       r  g   b    a
  this is another way to write a color
  rgb(); is red, green, blue
  and inside there should be 3 numbers between 0 and 255
  rgb(255, 255, 255) is white
  rgb(0, 0, 0) is black
  rgb(255, 0, 0) is red
  rgb(0, 255, 0) is green
  rgb(0, 0, 255) is blue
  here i use rgba();
  the difference is that there should be 4 numbers inside rgba()
  first the values for each color and then the value of a
  a stands for alpha and it makes the color transparent
  0 makes it invisible
  1 makes the color solid
  */
}
.redColor {
  background-color: red;
}
.both {
  width: 400px;
  height: 200px;
  color: #fff;
  text-align: center;
  margin: 5px;
}
/*------------------------------------------------sticky nav*/
.sticky {
  position: fixed;
  /*
  this says that i would like to stick my nav at the top of the page
  */
  width: 100%;
  /*
  you need to add width here because the position fixed messes with the navs width
  */
}
/*
this code makes it so that the nav bar sticks to the top of the page 
no matter how far down you scroll
*/
/*------------------------------------------------postiton*/
.relative {
  position: relative;
  /*
  this is a way to say that when i say position: absolute;
  it knows that i want it to be inside this one
  */
  width: 400px;
  height: 200px;
  border: 3px solid #73ad21;
}

.absolute {
  position: absolute;
  top: 80px;
  right: 0;
  /*
  top, left, bottom og right kan kun bruges i en container med position: absolute;
  som har en container med position: relative;
  hvis du ikke fatter hvad jeg mener så kigg på htmlen her:
  <div class="relative">This div element has position: relative;
      <div class="absolute">This div element has position: absolute;</div>
  </div>

  top and right tell this div where inside the position relative
  this div should be placed
  you can also use left and bottom
  if you do not have a position: relative; on the container of the one who has position: absolute;
  then this ones position can be anywhere in the html document
  if you remove the position: relative; from the other one this box will jump near the top of the site
  */
  width: 200px;
  height: 100px;
  border: 3px solid #73ad21;
}
/*------------------------------------------------media queries*/
@media only screen and (max-width: 480px) {
  #hide {
    background-color: lightgreen;
  }
  /*
  when the screen is 480px or less in width,
  the background color of my id turns lightgreen
  you can have a milion lines inside @media only screen and (max-width: 480px) {
  you can also use @media only screen and (min-width: 480px) {
  that means that when the screen is 480px or wider everything inside it will happen
  */
}
